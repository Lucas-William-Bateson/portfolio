---
type Project = {
  name: string;
  description: string;
  tags?: string[];
  url?: string;
  features?: string[];
  image?: string;
  highlight?: string;
};
const { projects = [] as Project[] } = Astro.props as { projects?: Project[] };
---
<div class="grid gap-8 md:grid-cols-2">
  {projects.map((p) => (
    <div class="relative pl-4 v-sep">
      {p.highlight ? (<div class="meta mb-1">{p.highlight}</div>) : null}
      <div class="flex items-center justify-between">
        <div class="font-semibold text-white text-lg">{p.name}</div>
        <a href={p.url ?? '#'} target={p.url ? '_blank' : undefined} rel="noreferrer noopener" class="link-raw">View â†—</a>
      </div>
      <div class="text-muted">{p.description}</div>
      {p.features && p.features.length ? (
        <ul class="list-dash text-muted mt-1">
          {p.features.map(f => (<li>{f}</li>))}
        </ul>
      ) : null}
      {p.tags && p.tags.length ? (
        <div class="flex flex-wrap gap-3 mt-1">{p.tags.map(t => (<span class="tag-raw">#{t}</span>))}</div>
      ) : null}
      {p.image ? (
        <div class="mt-3">
          <a href={p.image} data-fancybox="projects" class="link-raw">Screenshot</a>
        </div>
      ) : null}
    </div>
  ))}
</div>
